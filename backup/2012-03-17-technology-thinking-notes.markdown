---
layout: post
title:  "关于技术的思考，探索，三观的形成，零碎的记录"
date:   2012-03-17 11:00:03
categories: other
type: other
---

**多角度思考**  
今天一个问题让我发现自己真的思维有点过于被禁锢了。我的实现方式和同事的不一样，虽然结果都是正确的，但是我觉得自己真的需要多点交流，多点想别人学习，在学习的时候不要太在意面子，要像傻子一样向别人学习。我可能是在学习太久了，老是想着好算法，想要一个变量，更少的东西来完成事情，于是就纠结在了发出请求和回调这里怎么解决，思考的范围就停留在了回调这里，没想到同事从一开始那里出发，使用了两个变量，没有进行累加，反而更加清晰的解决问题。的确，我需要不仅从底下，也要从顶来思考问题，特别是不要被过去的模式禁锢住了，多使用变量也是没有太大的开销，放开一点。

**关于面试的时候如果面试官叫你提问，或者你可以提问的时候问什么**

1.待遇福利  
2.公司的发展前景，在行业中的核心竞争力是什么？  
3.公司的项目开发流程和管理制度如何？  
4.对于员工的个人发展怎么培养和定位？能力模型是什么？新人怎么培训？

**当年学习javaweb的心得积累**

很多东西设计得很复杂，例如数据库表字段少到可以放到1张表里，但是我们就要分开几张表，因为，架子要搭好，这样就很灵活了，扩展性很好，以后要改要加都很容易，就像框架和设计模式都把简单的东西复杂化，就是这个原因。

读源码，人家的项目，一般的做法是安装好了以后，顺着一条线地往下读。疑问，设计的时候也是这样的吗？还是一层层地来？先设计视图，再想数据层,逻辑层?

开发东西一定要约定好规范。

学习一样东西，要追求穿“一手鞋”，不要穿“二手鞋”，就是说，你查看的，你学习的是第一手资料，不是别人看过了转的，更确切地说就是要看源文档，一般是外国的，很多是论文。所以尽量多使用google，遇到问题少来第一时间就去百度，那都是别人的东西，要自己去试验，去看文档，当然更好的就是发email到作者，或者官网。千万不要等着别人写完程序，然后你去复制去改，也就是说，不要总看示例程序。

设计思想：用一个dto（data transfer object）来传递数据

设计思想：ModelDriven。返回一个model的引用。这个还需要深入理解

设计思想：DI dependency injection 依赖注入（IoC inverse of control 控制反转）。以上参考struts2

设计思路：a）界面原型，b）设计数据库，c）确定使用架构，d）使用约定

不管是写程序还是写项目，都是先写原型，就是写出一个小小的程序，然后一点一点地调试，不断地添加功能。即是迭代式开发。

做项目重点在设计上，而不是技术。

作为程序员，应该具备这些能力：  
学习新东西的能力，就是说，不管你是看书，看视频还是上网找资料，你自己总要有一种学习的途径,如何做笔记的，写心得，截图，写笔录，如何处理写过的代码（分类存好），对于例子代码如何看待，都要记住吗（只要理解了会了就可以，一般不要记住，记住的只是最常用的东西，懂得原理机制以后就自己写，避免写二手代码，就是copy改）；

阅读源码和别人的项目的能力，如何读，一行一行代码读？横着读？竖着读？先大概浏览一个类再细读。也就是先看主看明白流程，再看细节的东西。

解决问题的能力，当你遇到问题的时候，你总要有自己的一套解决方案，查看文档，Google，百度，看书，请教别人，还是发帖，发Email问人，我推荐看文档自己解决。熟悉自己的开发工具，这个都不会就没有资格做程序员了。

调试程序的能力，也就是学会debug,这个非常重要，连这个都不过就不用说开发了，阅读异常原因、名称然后找到位置的能力，你的开发工具如何debug，如何设断点，如何追踪，如何利用后台输出语句缩小范围找到异常处。以上能力具备以后再谈你的技术如何。

开发项目要做的事情：先分析需求明白业务逻辑，用powedesigner画用例图，画活动图，数据库建模，接口设计，约定规则（编码，规范）

学一门技术，如果有XML配置文件，把DTD/SCHEMA文件熟悉了就基本学会了

学习一样东西，一定要放得开，有时候不需要学得太广，不需要知道得太多，只要认真学要那一样东西就好了。很多成功的人就是这样的，他很认真地专一地学好那一样东西，并没有学习得太多，而是把自己的东西结合到里面去，运用到里面去，才有新的东西出来。

学东西，要先学脉络，再学细节

团队之间一定要合理协作，成员少而精，管理一定要到位，不然后果很严重。

学习查找信息（不断学习，了解，入门，使用，熟悉）：关键字要尽量精确，由精到粗，也可以用英文搜（log4j 入门），找不到就发帖问（中英文论坛）

阅读开源项目：首先看一下目录结构,然后看doc，看example，再看src

读英文文档或者书：读提纲，读关键词，读开头，需要细读某一段。中英文对照读API

作为程序员，学习一定要学会从代码进去。

有两个东西比死记硬背重要，1，查，2，综合运用

2	设计（实现方法）
2.1	设计方法：
a)	做设计如果只考虑到现在，就没有弹性，不具有可扩展性（多态），将来升级不好处理，要预想到将来的情况，可维护性
b)	用属性文件管理（需要知识：properties, Java解析xml, 反射机制）
c)	添加辅助类（把公用的代码封装起来，做成单例，放到缓存里面去。缓存相对读写硬盘来说，效率是很高的）
d)	降低耦合度（隐藏，封装）
e)	Over Design也是一种罪过，应该在有限的时间内设计最合适的最优的
f)	用到比较的时候，实现java.lang里面的Comparable的接口（用到泛型），写一个比较器，实现java.util里面的Comparator接口。策略模式就是定义一个策略比较器，然后由具体的比较策略来比较大小
g)	用到遍历的时候，实现Iterator接口（泛型）

思想是战略高度的东西（数据结构，算法）
工具是战术高度的东西（技术）
工具的学习：敢用，勤用

做东西，做设计，千万不要对自己要求太高，想要一次到位，太完美是不可能的，你要放开手去做你的设计，做完以后或者做了以后觉得不行再修改。

排序口诀：冒择路（插入）兮（希尔）快归堆

设计模式就是把简单的东西复杂化
学习模式，对于理解框架更好，而且做架构师必须的

**当年的学习疑惑与学习计划**

URI 和 URL的区别没有理解

Struts2那里，为什么action用map类型的request session application 而不用 httpsession httprequest httpapplication？

中文乱码问题。学习Ajax仿Google自动补全的时候在dopost中处理不了中文。

Ajax的无穷此级联菜单需要练习掌握

了解StringBuffer 和 StringBuilder

Hibernate的修改有问题（先获取对象）

还不会用连接池,了解spring的数据源配置 严重需要学习一下，要解决上次连接数少,阻塞，死锁的问题

Java反射机制还需要认真学习(基本完成)

JUnit需要认真学一学（基本完成）。

Log4j还需要学习, Apache commons logging, java log api（基本完成）

3大框架还需要认真学习，多看文档，多练习吧.(spring的AOP，注解注入，自动扫描。Struts的转换器，拦截器，I18N。hibernate的)

需要练习使用myeclipse配置文件的视图使用，如struts1/2配置文件的视图，可以直接new action

线程知识很重要还需要练习

Jsp只是负责显示页面和接收参数而已，一般来说struts的actioncontext已经很强悍了。虽说jsp的本质是servlet，但是用jsp来调用业务层可以吗？肯定是不合适的了，结构混乱，不清晰，而且我想一个问题，就是效率会不会变低了？客户端直接访问数据库总感觉不好，这应该是服务端的事情。

对于开发小组的工作划分问题，其实也是系统划分的问题，首先DAO,Bean肯定是对应数据库表的了，那么业务层的service呢？应该也对应表吗？如果对应表的话，是比较结构清晰，但是划分工作就不好了，除非整个业务层有一个人负责，或者系统功能模块不存在service交叉，也就是不同模块对应不同的表，但是实际的问题往往是交叉的，而且划分工作多数是不同人负责不同模块。然后是视图层的action，到底是如何划分，按照表来又会存在service层的相同问题，按照页面来又会产生非常多的action，而且不利于管理（如果页面改变则需要改变action，太不合理了），按照功能模块来命名也不好定。

必须学会系统维护，项目维护，项目升级，先来简单的，项目升级，学会原来写代码的习惯，先升级一小部分，然后调试一下，不要全部升级完了才去调试。

需要学习SVN

需要学习ant

需要学习maven

需要学习正则表达式

学要学习Flex

学习数据库的index等知识