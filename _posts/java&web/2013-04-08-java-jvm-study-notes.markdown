---
layout: post
title:  "Java的JVM学习笔记!"
date:   2013-04-08 13:00:03
categories: java
type: java&web
---

1.Java内存可以大概理解为运行前java虚拟机向操作系统申请初始化内存，然后运行中java应用程序在jvm管理的逻辑内存下运行，
  如果jvm内存不够就继续向操作系统申请，jvm可以设置参数调优，有初始大小和最大大小。如果超出的话就会发生溢出。
  
2.Java内存模型简单分为方法区，堆和栈，但是其实还可以划分得更细。一般来说记住简单的就可以了。详细划分如下
  程序计数器：每个线程都有一个PC用于记录当前执行指令（VM的原语），该区域没有规定OutOfMemoryError情况。
  JVM栈：生命周期与线程相同。这里存放8标准类型，引用值，方法返回地址等。如果线程请求的栈深度大于虚拟机所允许的深度，就抛出
         StackOverflowError异常；如果JVM栈可以动态扩展，但是扩展无法申请足够内存就抛出OutOfMemoryError异常。
  本地方法栈：作用与JVM栈一样，不过的是为native方法服务。一般两者和在一起讨论。
  堆：这是线程共享的，栈是每个线程都有的。按照回收机制，堆可以分为两个区,新生代和老年代。对象（包括数组）是存放在这里的。GC在这里回收。
  方法区：存放类的结构信息，常量池，字段描述，方法描述，静态变量，静态方法，class类的引用，classloader类的引用，这两个引用用于反射机制。
  运行时常量池：它属于方法区的一部分。静态常量和非静态常量都存放在这里，静态常量的初始化只有在类加载的时候进行一次。在运行时调用intern()方法
  		可以把变量加入常量池。
  本机直接内存：不再JVM管理范围，但是存放一些资源，IO缓冲等如果没有手动释放会产生内存泄漏。
  
3.具体来说，一个类在JVM的内存这样存放：类的结构信息，常量，静态常量，静态方法,class类和classloader的引用存放在方法区，然后类的属性信息，包括
  变量属性，引用属性等存放在堆，对于局部变量存放在栈，而且对已这个对象的引用也是存放在栈的。方法的调用，不管传值还是传引用值，都是压入栈的。