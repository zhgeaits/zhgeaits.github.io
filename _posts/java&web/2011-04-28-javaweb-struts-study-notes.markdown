---
layout: post
title: "经典的MVC设计模式产品Struts学习记录"
date: 2011-04-28 01:15:24
categories: javaweb
type: java&web
---

## 1 什么是Struts

学完servlet和jsp以后，又有了数据库，jdbc，前端的知识基础，开发一个网站产品是一件很容易的事情了，所以我也因此练习了两个项目，一个xaygc的卖书商店，一个是企业信息管理系统，项目在TrainingForWeb；虽然项目很小，但是各方面知识都具备了，还有DAO的框架（见JDBC的blog），很值得学习的。

但是开发起来还是有很多不便的，没有实现低耦合高内聚的设计原则，也就是不太方便以后的扩展与维护。于是，伟大的apache又开发了一个顶级项目struts，基于mvc设计模式的；但是struts并不是对于开发来说很便捷，所以别的公司还在开发更好的框架，webwork就是struts2的前身，用拦截器的机制来处理用户的请求，这样的设计也使得业务逻辑控制器能够与ServletAPI完全脱离开，对于开发来说更加便利了。

## 2 MVC设计模式

jsp刚出来的时候，因为里面即可以写java，又可以写前端代码，就像php一样，所以基本上所有的代码都是在那里写的，访问数据库也是在那里，这样实在是太复杂了，于是java就出了model的规范，如下图所示：

![alt text](/image/model1.jpg "model1")

JSP页面负责表现逻辑、控制逻辑，JavaBean负责业务实现、持久化逻辑；这样对部分业务逻辑的进行了封装，但是缺乏对控制逻辑的封装，jsp及负责表现逻辑，又负责控制逻辑。于是又出现了model2的规范，如下图所示：

![alt text](/image/model2.jpg "model2")

JSP页面仅负责表现逻辑，JavaBean负责业务实现、持久化逻辑，Servlet负责流程控制，彻底分离了业务逻辑与表现逻辑，进一步简化了JSP页面，但是Servlet往往难以维护，就算使用那个DAO框架，所以才会出现struts那些框架。

其实上面model2就是mvc框架的一个比较好的实现了，但是还不算完全。mvc是模型(model)，视图(view)和控制器(controller)的缩写，把业务逻辑、数据和界面显示进行了分离，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。如下图所示：

![alt text](/image/mvc.png "mvc")

Model是应用程序中用于处理应用程序数据逻辑的部分，通常模型对象负责在数据库中存取数据。例如使用的DAO框架就是一个Model，包括了bean和操作数据的逻辑。

View是应用程序中处理数据显示的部分，通常视图是依据模型数据创建的。例如jsp现实页面数据。

Controller是应用程序中处理用户交互的部分，通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。例如servlet。

## 3 struts1最经典的第一个版本

官方网站是：http://struts.apache.org/。有了struts以后，真的开发会方便很多，例如拦截，校验，表单，标签等等功能。去官网下载完整版本，包括我lib，source和doc，里面有详细的教程，也方便学习。

### 3.1 配置使用

## 4 struts2最实用的第二个版本